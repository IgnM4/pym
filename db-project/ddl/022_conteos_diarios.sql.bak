-- Conteos diarios de inventario

CREATE TABLE conteo_inv_cab (
  id_conteo    NUMBER GENERATED BY DEFAULT AS IDENTITY,
  fecha        DATE     NOT NULL,
  hora         VARCHAR2(8) NOT NULL,
  id_ubicacion NUMBER   NOT NULL,
  responsable  VARCHAR2(100),
  confirmado   CHAR(1) DEFAULT 'N' NOT NULL CHECK (confirmado IN ('S','N')),
  creado_por   VARCHAR2(30),
  creado_en    TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
  CONSTRAINT pk_conteo_inv_cab PRIMARY KEY (id_conteo)
);

ALTER TABLE conteo_inv_cab ADD CONSTRAINT fk_conteo_cab__ubicacion FOREIGN KEY (id_ubicacion) REFERENCES ubicacion(id_ubicacion);

CREATE TABLE conteo_inv_det (
  id_conteo   NUMBER NOT NULL,
  id_producto NUMBER NOT NULL,
  llenos      NUMBER DEFAULT 0 NOT NULL,
  vacios      NUMBER DEFAULT 0 NOT NULL,
  CONSTRAINT pk_conteo_inv_det PRIMARY KEY (id_conteo, id_producto)
);

ALTER TABLE conteo_inv_det ADD CONSTRAINT fk_conteo_det__cab FOREIGN KEY (id_conteo) REFERENCES conteo_inv_cab(id_conteo) ON DELETE CASCADE;
ALTER TABLE conteo_inv_det ADD CONSTRAINT fk_conteo_det__producto FOREIGN KEY (id_producto) REFERENCES producto(id_producto);

BEGIN
  EXECUTE IMMEDIATE 'DROP PROCEDURE pr_conteo_confirmar';
EXCEPTION
  WHEN OTHERS THEN
    IF SQLCODE != -4043 THEN RAISE; END IF;
END;
/

CREATE OR REPLACE PROCEDURE pr_conteo_confirmar(p_id_conteo IN NUMBER) IS
  v_id_ubicacion ubicacion.id_ubicacion%TYPE;
  v_confirmado  conteo_inv_cab.confirmado%TYPE;
BEGIN
  SELECT id_ubicacion, confirmado
    INTO v_id_ubicacion, v_confirmado
    FROM conteo_inv_cab
   WHERE id_conteo = p_id_conteo
   FOR UPDATE;

  IF v_confirmado = 'S' THEN
    RETURN;
  END IF;

  FOR r IN (
    SELECT d.id_producto,
           d.llenos,
           d.vacios,
           NVL(s.llenos,0) AS llenos_actual,
           NVL(s.vacios,0) AS vacios_actual
      FROM conteo_inv_det d
      LEFT JOIN stock_ubicacion s
        ON s.id_ubicacion = v_id_ubicacion
       AND s.id_producto  = d.id_producto
     WHERE d.id_conteo = p_id_conteo
  ) LOOP
    -- diferencia entre conteo y stock actual
    DECLARE
      v_diff_llenos NUMBER := r.llenos - r.llenos_actual;
      v_diff_vacios NUMBER := r.vacios - r.vacios_actual;
    BEGIN
      MERGE INTO stock_ubicacion su
      USING dual
         ON (su.id_ubicacion = v_id_ubicacion AND su.id_producto = r.id_producto)
      WHEN MATCHED THEN
        UPDATE SET su.llenos = r.llenos,
                   su.vacios = r.vacios,
                   su.fecha_actualizacion = SYSTIMESTAMP
      WHEN NOT MATCHED THEN
        INSERT (id_ubicacion, id_producto, llenos, vacios, fecha_actualizacion)
        VALUES (v_id_ubicacion, r.id_producto, r.llenos, r.vacios, SYSTIMESTAMP);

      IF v_diff_llenos <> 0 THEN
        INSERT INTO movimiento_stock (fecha, tipo, id_ubicacion_desde, id_ubicacion_hasta,
                                      id_producto, cantidad, es_lleno, ref_tipo, ref_id)
        VALUES (SYSTIMESTAMP, 'CONTEO', v_id_ubicacion, v_id_ubicacion,
                r.id_producto, v_diff_llenos, 'S', 'CONTEO_INV', p_id_conteo);
      END IF;

      IF v_diff_vacios <> 0 THEN
        INSERT INTO movimiento_stock (fecha, tipo, id_ubicacion_desde, id_ubicacion_hasta,
                                      id_producto, cantidad, es_lleno, ref_tipo, ref_id)
        VALUES (SYSTIMESTAMP, 'CONTEO', v_id_ubicacion, v_id_ubicacion,
                r.id_producto, v_diff_vacios, 'N', 'CONTEO_INV', p_id_conteo);
      END IF;
    END;
  END LOOP;

  UPDATE conteo_inv_cab
     SET confirmado = 'S'
   WHERE id_conteo = p_id_conteo;
END;
/
